/*!
Chosen, a Select Box Enhancer for jQuery and Prototype
by Patrick Filler for Harvest, http://getharvest.com

Version 1.6.2
Full source at https://github.com/harvesthq/chosen
Copyright (c) 2011-2016 Harvest http://getharvest.com

MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
This file is generated by `grunt build`, do not edit it by hand.
*/

(function() {
  var $, AbstractChosen, Chosen, SelectParser, _ref,
  //  __hasProp = {}.hasOwnProperty,
    __extends = set_extend_funct(child, parent);

  SelectParser = (function() {
    function SelectParser() {
      this.options_index = 0;
      this.parsed = [];
    }

    SelectParser.prototype.add_node = add_node_funct(child);

    SelectParser.prototype.add_group = add_group_funct(group);

    SelectParser.prototype.add_option = add_option(option, group_position, group_disabled);

    SelectParser.prototype.escapeExpression = escapeExpression_funct();

    return SelectParser;

  })();

  SelectParser.select_to_array = select_to_array_funct(select);

  AbstractChosen = (function() {
	  
	AbstractChosen(form_field, options);

    chosen_mouse_controller_funct();
    
    AbstractChosen.prototype.results_update_field = results_update_field_funct();

    AbstractChosen.prototype.reset_single_select_options = reset_single_select_options_funct();

    AbstractChosen.prototype.results_toggle = results_toggle_funct();

    AbstractChosen.prototype.results_search = results_search_funct(evt);

    

    AbstractChosen.prototype.winnow_results = winnow_results_funct();

    prototype_divide_method();
    
    prototype_divide_part2_funct();
    
    default_text_funct();


    return AbstractChosen;

  })();

  $ = jQuery;

  $.fn.extend({
    chosen: function(options) {
      if (!AbstractChosen.browser_is_supported()) {
        return this;
      }
      return this.each(function(input_field) {
        var $this, chosen;
        $this = $(this);
        chosen = $this.data('chosen');
        if (options === 'destroy') {
          if (chosen instanceof Chosen) {
            chosen.destroy();
          }
          return;
        }
        if (!(chosen instanceof Chosen)) {
          $this.data('chosen', new Chosen(this, options));
        }
      });
    }
  });

  Chosen = (function(_super) {
    __extends(Chosen, _super);

    function Chosen() {
      _ref = Chosen.__super__.constructor.apply(this, arguments);
      return _ref;
    }
    
    prototype_part0_funct();

    return Chosen;

  })(AbstractChosen);

}).call(this);


function AbstractChosen(form_field, options) {
    this.form_field = form_field;
    if (options !== null){
    	this.options=options;
    }
    if (!AbstractChosen.browser_is_supported()) {
      return;
    }
    this.is_multiple = this.form_field.multiple;
    this.set_default_text();
    this.set_default_values();
    this.setup();
    this.set_up_html();
    this.register_observers();
    this.on_ready();
  };

function set_extend_funct(child, parent) { 
	  for (var key in parent) { 
		  if (__hasProp.call(parent, key)) child[key] = parent[key]; } 
	  function ctor() { 
		  this.constructor = child; } 
	  ctor.prototype = parent.prototype;
	  child.prototype = new ctor(); 
	  child.__super__ = parent.prototype; 
	  return child; };

function select_to_array_funct(select) {
    var child, parser, _i, _len, _ref;
    parser = new SelectParser();
    _ref = select.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      parser.add_node(child);
    }
    return parser.parsed;
  };


function add_node_funct(child) {
    if (child.nodeName.toUpperCase() === "OPTGROUP") {
      return this.add_group(child);
    } else {
      return this.add_option(child);
    }
  };

function prototype_divide_part2_funct(){
	
	 AbstractChosen.prototype.search_results_touchstart = search_results_touchstart_funct(evt);

	 AbstractChosen.prototype.search_results_touchmove = search_results_touchmove_funct(evt);

	 AbstractChosen.prototype.search_results_touchend = search_results_touchend_funct(evt);

	 AbstractChosen.prototype.outerHTML = prototype_outerHTML_funct(element);

	 AbstractChosen.browser_is_supported = browser_is_supported_funct();
	
};

function winnow_results_funct() {
    var escapedSearchText, option, regex, results, results_group, searchText, startpos, text, zregex, _i, _len, _ref;
    this.no_results_clear();
    results = 0;
    searchText = this.get_search_text();
    escapedSearchText = searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    zregex = new RegExp(escapedSearchText, 'i');
    regex = this.get_search_regex(escapedSearchText);
    _ref = this.results_data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      option = _ref[_i];
      option.search_match = false;
      results_group = null;
      if (this.include_option_in_results(option)) {
        if (option.group) {
          option.group_match = false;
          option.active_options = 0;
        }
        if ((option.group_array_index !== null) && this.results_data[option.group_array_index]) {
          results_group = this.results_data[option.group_array_index];
          if (results_group.active_options === 0 && results_group.search_match) {
            results += 1;
          }
          results_group.active_options += 1;
        }
        if (option.group){
        	option.search_text = option.label;
        }else {
        	option.search_text = option.html;
        }
       // option.search_text = option.group ? option.label : option.html;
        if (!(option.group && !this.group_search)) {
          option.search_match = this.search_string_match(option.search_text, regex);
          if (option.search_match && !option.group) {
            results += 1;
          }
          if (option.search_match) {
            if (searchText.length) {
              startpos = option.search_text.search(zregex);
              text = option.search_text.substr(0, startpos + searchText.length) + '</em>' + option.search_text.substr(startpos + searchText.length);
              option.search_text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
            }
            if (results_group !== null) {
              results_group.group_match = true;
            }
          } else if ((option.group_array_index != null) && this.results_data[option.group_array_index].search_match) {
            option.search_match = true;
          }
        }
      }
    }
    this.result_clear_highlight();
    if (results < 1 && searchText.length) {
      this.update_results_content("");
      return this.no_results(searchText);
    } else {
      this.update_results_content(this.results_option_build());
      return this.winnow_results_set_highlight();
    }
  };

function prototype_part0_funct(){
	
    prototype_part1_funct();
    
    prototype_part2_funct();
    
    prototype_part3_funct();
    
    prototype_part4_funct();
    
    Chosen.prototype.clear_backstroke = clear_backstroke_funct();

    Chosen.prototype.keydown_checker = keyDownChecker(evt);

    Chosen.prototype.search_field_scale = giveFieldScale();
};

function chosen_mouse_controller_funct(){
	
	AbstractChosen.prototype.choice_label = choice_label_funct(item);

	AbstractChosen.prototype.mouse_enter = mouse_enter_funct();

	AbstractChosen.prototype.mouse_leave = mouse_leave_funct();

	AbstractChosen.prototype.input_focus = input_focus_funct(evt);

	AbstractChosen.prototype.input_blur = input_blur_funct(evt);

	AbstractChosen.prototype.results_option_build = results_option_build_funct(options);

	AbstractChosen.prototype.result_add_option = result_add_option_funct(group);
	
	AbstractChosen.prototype.result_add_group = result_add_group_funct();
	
};

function choice_label_funct(item) {
    if (this.include_group_label_in_selected && (item.group_label != null)) {
      return "<b class='group-name'>" + item.group_label + "</b>" + item.html;
    } else {
      return item.html;
    }
  };

function default_text_funct(){

    AbstractChosen.default_multiple_text = "Select Some Options";

    AbstractChosen.default_single_text = "Select an Option";

    AbstractChosen.default_no_result_text = "No results match";
};

function set_default_funct(){
	AbstractChosen.prototype.set_default_values = prototype_set_default_values_funct();

    AbstractChosen.prototype.set_default_text = prototype_set_default_text_funct();
};

function mouse_enter_funct() {
    return this.mouse_on_container = true;
  };

function mouse_leave_funct() {
    return this.mouse_on_container = false;
  };

function prototype_divide_method(){
	
    AbstractChosen.prototype.get_search_regex = get_search_regex_funct(escaped_search_string);

    AbstractChosen.prototype.search_string_match = search_string_match_funct(search_string, regex);

    AbstractChosen.prototype.choices_count = choices_count_funct();

    AbstractChosen.prototype.choices_click = choices_click_funct(evt);

    AbstractChosen.prototype.keyup_checker = prototype_keyup_checker_funct(evt);

    AbstractChosen.prototype.clipboard_event_checker = prototype_clipboard_event_checker_funct(evt);

    AbstractChosen.prototype.container_width = container_width_funct();

    AbstractChosen.prototype.include_option_in_results = prototype_include_option_in_results_funct(option);
};

function prototype_set_default_text_funct() {
    if (this.form_field.getAttribute("data-placeholder")) {
      this.default_text = this.form_field.getAttribute("data-placeholder");
    } else if (this.is_multiple) {
      this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;
    } else {
      this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;
    }
    return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;
  };

function prototype_set_default_values_funct() {
    var _this = this;
    this.click_test_action = function(evt) {
      return _this.test_active_click(evt);
    };
    this.activate_action = function(evt) {
      return _this.activate_field(evt);
    };
    this.active_field = false;
    this.mouse_on_container = false;
    this.results_showing = false;
    this.result_highlighted = null;
    if ((this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && (this.form_field_options[0].text === "")){
    	this.allow_single_deselect=this.options.allow_single_deselect;
    }else{
    	this.allow_single_deselect = false;
    }
    this.disable_search_threshold = this.options.disable_search_threshold || 0;
    this.disable_search = this.options.disable_search || false;
    if (this.options.enable_split_word_search !== null){
    	this.enable_split_word_search = this.options.enable_split_word_search;
    }else{
    	this.enable_split_word_search = true;
    }
    if (this.options.group_search !== null){
    	this.group_search = this.options.group_search;
    }else {
    	this.group_search = true;
    }
    this.search_contains = this.options.search_contains || false;
    if (this.options.single_backstroke_delete !== null){
    	this.single_backstroke_delete = this.options.single_backstroke_delete;
    }else {
    	this.single_backstroke_delete = true;
    }
    this.max_selected_options = this.options.max_selected_options || Infinity;
    this.inherit_select_classes = this.options.inherit_select_classes || false;
    if (this.options.display_selected_options !== null){
    	this.display_selected_options = this.options.display_selected_options;
    }else {
    	this.display_selected_options = true;
    }
    if (this.options.display_disabled_options !== null){
    	 this.display_disabled_options = this.options.display_disabled_options;
    }else {
    	this.display_disabled_options = true;
    }
    this.include_group_label_in_selected = this.options.include_group_label_in_selected || false;
    this.max_shown_results = this.options.max_shown_results || Number.POSITIVE_INFINITY;
    return this.case_sensitive_search = this.options.case_sensitive_search || false;
  };


function input_focus_funct(evt) {
    var _this = this;
    if (this.is_multiple) {
      if (!this.active_field) {
        return setTimeout((function() {
          return _this.container_mousedown();
        }), 50);
      }
    } else {
      if (!this.active_field) {
        return this.activate_field();
      }
    }
  };

function input_blur_funct(evt) {
    var _this = this;
    if (!this.mouse_on_container) {
      this.active_field = false;
      return setTimeout((function() {
        return _this.blur_test();
      }), 100);
    }
  };

function results_option_build_funct(options) {
    var content, data, data_content, shown_results, _i, _len, _ref;
    content = '';
    shown_results = 0;
    _ref = this.results_data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      data = _ref[_i];
      data_content = '';
      if (data.group) {
        data_content = this.result_add_group(data);
      } else {
        data_content = this.result_add_option(data);
      }
      if (data_content !== '') {
        shown_results++;
        content += data_content;
      }
      if (options != null ? options.first : void 0) {
        if (data.selected && this.is_multiple) {
          this.choice_build(data);
        } else if (data.selected && !this.is_multiple) {
          this.single_set_selected_text(this.choice_label(data));
        }
      }
      if (shown_results >= this.max_shown_results) {
        break;
      }
    }
    return content;
  };

function(option) {
    var classes, option_el;
    if (!option.search_match) {
      return '';
    }
    if (!this.include_option_in_results(option)) {
      return '';
    }
    classes = [];
    if (!option.disabled && !(option.selected && this.is_multiple)) {
      classes.push("active-result");
    }
    if (option.disabled && !(option.selected && this.is_multiple)) {
      classes.push("disabled-result");
    }
    if (option.selected) {
      classes.push("result-selected");
    }
    if (option.group_array_index != null) {
      classes.push("group-option");
    }
    if (option.classes !== "") {
      classes.push(option.classes);
    }
    option_el = document.createElement("li");
    option_el.className = classes.join(" ");
    option_el.style.cssText = option.style;
    option_el.setAttribute("data-option-array-index", option.array_index);
    option_el.innerHTML = option.search_text;
    if (option.title) {
      option_el.title = option.title;
    }
    return this.outerHTML(option_el);
  };


function result_add_group_funct_funct(group) {
    var classes, group_el;
    if (!(group.search_match || group.group_match)) {
      return '';
    }
    if (!(group.active_options > 0)) {
      return '';
    }
    classes = [];
    classes.push("group-result");
    if (group.classes) {
      classes.push(group.classes);
    }
    group_el = document.createElement("li");
    group_el.className = classes.join(" ");
    group_el.innerHTML = group.search_text;
    if (group.title) {
      group_el.title = group.title;
    }
    return this.outerHTML(group_el);
  };

function results_update_field_funct() {
    this.set_default_text();
    if (!this.is_multiple) {
      this.results_reset_cleanup();
    }
    this.result_clear_highlight();
    this.results_build();
    if (this.results_showing) {
      return this.winnow_results();
    }
  };

function reset_single_select_options_funct() {
    var result, _i, _len, _ref, _results;
    _ref = this.results_data;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      result = _ref[_i];
      if (result.selected) {
        _results.push(result.selected = false);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

function results_toggle_funct() {
    if (this.results_showing) {
      return this.results_hide();
    } else {
      return this.results_show();
    }
  };

function results_search_funct(evt) {
    if (this.results_showing) {
      return this.winnow_results();
    } else {
      return this.results_show();
    }
  };

function get_search_regex_funct(escaped_search_string) {
    var regex_anchor, regex_flag;
   // regex_anchor = this.search_contains ? "" : "^";
    if (this.search_contains){
    	regex_anchor = "";
    }else {
    	regex_anchor = "^";
    }
    regex_flag = this.case_sensitive_search ? "" : "i";
    return new RegExp(regex_anchor + escaped_search_string, regex_flag);
  };

function search_string_match_funct(search_string, regex) {
    var part, parts, _i, _len;
    if (regex.test(search_string)) {
      return true;
    } else if (this.enable_split_word_search && (search_string.indexOf(" ") >= 0 || search_string.indexOf("[") === 0)) {
      parts = search_string.replace(/\[|\]/g, "").split(" ");
      if (parts.length) {
        for (_i = 0, _len = parts.length; _i < _len; _i++) {
          part = parts[_i];
          if (regex.test(part)) {
            return true;
          }
        }
      }
    }
  };

function prototype_part4_funct(){
	Chosen.prototype.single_set_selected_text = single_set_selected_text_funct(text);

    Chosen.prototype.result_deselect = result_deselect_funct(pos);

    Chosen.prototype.single_deselect_control_build = single_deselect_control_build_funct();

    Chosen.prototype.get_search_text = get_search_text_funct();

    Chosen.prototype.winnow_results_set_highlight = winnow_results_set_highlight_funct();

    Chosen.prototype.no_results = no_results_funct(terms);

    Chosen.prototype.no_results_clear = no_results_clear_funct();

    Chosen.prototype.keydown_arrow = keydown_arrow_funct();

    Chosen.prototype.keyup_arrow = keyup_arrow_funct();

    Chosen.prototype.keydown_backstroke = keyDownBackstroke();

};

function prototype_part3_funct(){
	Chosen.prototype.show_search_field_default = show_search_field_default();

    Chosen.prototype.search_results_mouseup = search_results_mouseup_funct(evt);

    Chosen.prototype.search_results_mouseover = search_results_mouseover_funct(evt);

    Chosen.prototype.search_results_mouseout = results_mouseout_funct(evt);
    	
    Chosen.prototype.choice_build = choice_build_funct(item);

    Chosen.prototype.choice_destroy_link_click = destroy_link_click_funct(evt);
    
    Chosen.prototype.choice_destroy = choice_destroy_funct(link);

    Chosen.prototype.results_reset = result_reset_funct();

    Chosen.prototype.results_reset_cleanup = reset_cleanup_funct();

    Chosen.prototype.result_select = result_select_funct(evt);
};

function choices_count_funct() {
    var option, _i, _len, _ref;
    if (this.selected_option_count != null) {
      return this.selected_option_count;
    }
    this.selected_option_count = 0;
    _ref = this.form_field.options;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      option = _ref[_i];
      if (option.selected) {
        this.selected_option_count += 1;
      }
    }
    return this.selected_option_count;
  };

function choices_click_funct(evt) {
    evt.preventDefault();
    if (!(this.results_showing || this.is_disabled)) {
      return this.results_show();
    }
  };

function container_width_funct() {
    if (this.options.width != null) {
      return this.options.width;
    } else {
      return "" + this.form_field.offsetWidth + "px";
    }
  };

function search_results_touchstart_funct(evt) {
    this.touch_started = true;
    return this.search_results_mouseover(evt);
  };

function search_results_touchmove_funct(evt) {
    this.touch_started = false;
    return this.search_results_mouseout(evt);
  };

function search_results_touchend_funct(evt) {
    if (this.touch_started) {
      return this.search_results_mouseup(evt);
    }
  };
  
function prototype_part2_funct(){
	Chosen.prototype.activate_field = prototype_activate_field_funct();

    Chosen.prototype.test_active_click = prototype_test_active_click_funct(evt);

    Chosen.prototype.results_build = prototype_results_build_funct();

    Chosen.prototype.result_do_highlight = result_do_highlight_funct(el);

    Chosen.prototype.result_clear_highlight = result_clear_highlight_funct();

    Chosen.prototype.results_show = results_show_funct();

    Chosen.prototype.update_results_content = update_results_content_funct(content);

    Chosen.prototype.results_hide = results_hide_funct();

    Chosen.prototype.set_tab_index = set_tab_index_funct(el);

    Chosen.prototype.set_label_behavior = set_label_behavior_funct();
}

function prototype_part1_funct(){
	
	Chosen.prototype.setup = prototype_setup_funct();

    Chosen.prototype.set_up_html = prototype_set_up_html_funct();

    Chosen.prototype.on_ready = prototype_on_ready_funct();

    Chosen.prototype.register_observers = prototype_register_observers_funct();

    Chosen.prototype.destroy = prototype_destroy_funct();

    Chosen.prototype.search_field_disabled = prototype_search_field_disabled_funct();

    Chosen.prototype.container_mousedown = prototype_container_mousedown_funct(evt);

    Chosen.prototype.container_mouseup = prototype_container_mouseup_funct(evt);

    Chosen.prototype.search_results_mousewheel = prototype_search_results_mousewheel_funct(evt);

    Chosen.prototype.blur_test = prototype_blur_test_funct(evt);

    Chosen.prototype.close_field = prototype_close_field_funct();
}

function prototype_clipboard_event_checker_funct(evt) {
    var _this = this;
    return setTimeout((function() {
      return _this.results_search();
    }), 50);
  };

function prototype_keyup_checker_funct(evt) {
    var stroke, _ref;
    stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
    this.search_field_scale();
    switch (stroke) {
      case 8:
        if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
          return this.keydown_backstroke();
        } else if (!this.pending_backstroke) {
          this.result_clear_highlight();
          return this.results_search();
        }
        break;
      case 13:
        evt.preventDefault();
        if (this.results_showing) {
          return this.result_select(evt);
        }
        break;
      case 27:
        if (this.results_showing) {
          this.results_hide();
        }
        return true;
      case 9:
      case 38:
      case 40:
      case 16:
      case 91:
      case 17:
      case 18:
        break;
      default:
        return this.results_search();
    }
  };

function prototype_include_option_in_results_funct(option) {
    if (this.is_multiple && (!this.display_selected_options && option.selected)) {
      return false;
    }
    if (!this.display_disabled_options && option.disabled) {
      return false;
    }
    if (option.empty) {
      return false;
    }
    return true;
  };

function prototype_outerHTML_funct(element) {
    var tmp;
    if (element.outerHTML) {
      return element.outerHTML;
    }
    tmp = document.createElement("div");
    tmp.appendChild(element);
    return tmp.innerHTML;
  };

function browser_is_supported_funct() {
    if ("Microsoft Internet Explorer" === window.navigator.appName) {
      return document.documentMode >= 8;
    }
    if (/iP(od|hone)/i.test(window.navigator.userAgent) || /IEMobile/i.test(window.navigator.userAgent) || /Windows Phone/i.test(window.navigator.userAgent) || /BlackBerry/i.test(window.navigator.userAgent) || /BB10/i.test(window.navigator.userAgent) || /Android.*Mobile/i.test(window.navigator.userAgent)) {
      return false;
    }
    return true;
  };

function prototype_setup_funct() {
    this.form_field_jq = $(this.form_field);
    this.current_selectedIndex = this.form_field.selectedIndex;
    return this.is_rtl = this.form_field_jq.hasClass("chosen-rtl");
  };

function prototype_set_up_html_funct() {
    var container_classes, container_props;
    container_classes = ["chosen-container"];
    container_classes.push("chosen-container-" + (this.is_multiple ? "multi" : "single"));
    if (this.inherit_select_classes && this.form_field.className) {
      container_classes.push(this.form_field.className);
    }
    if (this.is_rtl) {
      container_classes.push("chosen-rtl");
    }
    container_props = {
      'class': container_classes.join(' '),
      'style': "width: " + (this.container_width()) + ";",
      'title': this.form_field.title
    };
    if (this.form_field.id.length) {
      container_props.id = this.form_field.id.replace(/[^\w]/g, '_') + "_chosen";
    }
    this.container = $("<div />", container_props);
    if (this.is_multiple) {
      this.container.html('<ul class="chosen-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>');
    } else {
      this.container.html('<a class="chosen-single chosen-default"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>');
    }
    this.form_field_jq.hide().after(this.container);
    this.dropdown = this.container.find('div.chosen-drop').first();
    this.search_field = this.container.find('input').first();
    this.search_results = this.container.find('ul.chosen-results').first();
    this.search_field_scale();
    this.search_no_results = this.container.find('li.no-results').first();
    if (this.is_multiple) {
      this.search_choices = this.container.find('ul.chosen-choices').first();
      this.search_container = this.container.find('li.search-field').first();
    } else {
      this.search_container = this.container.find('div.chosen-search').first();
      this.selected_item = this.container.find('.chosen-single').first();
    }
    this.results_build();
    this.set_tab_index();
    return this.set_label_behavior();
  };

function prototype_on_ready_funct() {
    return this.form_field_jq.trigger("chosen:ready", {
      chosen: this
    });
  };

function prototype_register_observers_funct() {
    var _this = this;
    this.container.bind('touchstart.chosen', function(evt) {
      _this.container_mousedown(evt);
      return evt.preventDefault();
    });
    this.container.bind('touchend.chosen', function(evt) {
      _this.container_mouseup(evt);
      return evt.preventDefault();
    });
    this.container.bind('mousedown.chosen', function(evt) {
      _this.container_mousedown(evt);
    });
    this.container.bind('mouseup.chosen', function(evt) {
      _this.container_mouseup(evt);
    });
    this.container.bind('mouseenter.chosen', function(evt) {
      _this.mouse_enter(evt);
    });
    this.container.bind('mouseleave.chosen', function(evt) {
      _this.mouse_leave(evt);
    });
    this.search_results.bind('mouseup.chosen', function(evt) {
      _this.search_results_mouseup(evt);
    });
    this.search_results.bind('mouseover.chosen', function(evt) {
      _this.search_results_mouseover(evt);
    });
    this.search_results.bind('mouseout.chosen', function(evt) {
      _this.search_results_mouseout(evt);
    });
    this.search_results.bind('mousewheel.chosen DOMMouseScroll.chosen', function(evt) {
      _this.search_results_mousewheel(evt);
    });
    this.search_results.bind('touchstart.chosen', function(evt) {
      _this.search_results_touchstart(evt);
    });
    this.search_results.bind('touchmove.chosen', function(evt) {
      _this.search_results_touchmove(evt);
    });
    this.search_results.bind('touchend.chosen', function(evt) {
      _this.search_results_touchend(evt);
    });
    this.form_field_jq.bind("chosen:updated.chosen", function(evt) {
      _this.results_update_field(evt);
    });
    this.form_field_jq.bind("chosen:activate.chosen", function(evt) {
      _this.activate_field(evt);
    });
    this.form_field_jq.bind("chosen:open.chosen", function(evt) {
      _this.container_mousedown(evt);
    });
    this.form_field_jq.bind("chosen:close.chosen", function(evt) {
      _this.input_blur(evt);
    });
    this.search_field.bind('blur.chosen', function(evt) {
      _this.input_blur(evt);
    });
    this.search_field.bind('keyup.chosen', function(evt) {
      _this.keyup_checker(evt);
    });
    this.search_field.bind('keydown.chosen', function(evt) {
      _this.keydown_checker(evt);
    });
    this.search_field.bind('focus.chosen', function(evt) {
      _this.input_focus(evt);
    });
    this.search_field.bind('cut.chosen', function(evt) {
      _this.clipboard_event_checker(evt);
    });
    this.search_field.bind('paste.chosen', function(evt) {
      _this.clipboard_event_checker(evt);
    });
    if (this.is_multiple) {
      return this.search_choices.bind('click.chosen', function(evt) {
        _this.choices_click(evt);
      });
    } else {
      return this.container.bind('click.chosen', function(evt) {
        evt.preventDefault();
      });
    }
  };

function prototype_destroy_funct() {
    $(this.container[0].ownerDocument).unbind("click.chosen", this.click_test_action);
    if (this.search_field[0].tabIndex) {
      this.form_field_jq[0].tabIndex = this.search_field[0].tabIndex;
    }
    this.container.remove();
    this.form_field_jq.removeData('chosen');
    return this.form_field_jq.show();
  };
  
function prototype_search_field_disabled_funct() {
    this.is_disabled = this.form_field_jq[0].disabled;
    if (this.is_disabled) {
      this.container.addClass('chosen-disabled');
      this.search_field[0].disabled = true;
      if (!this.is_multiple) {
        this.selected_item.unbind("focus.chosen", this.activate_action);
      }
      return this.close_field();
    } else {
      this.container.removeClass('chosen-disabled');
      this.search_field[0].disabled = false;
      if (!this.is_multiple) {
        return this.selected_item.bind("focus.chosen", this.activate_action);
      }
    }
  };

function prototype_container_mousedown_funct(evt) {
    if (!this.is_disabled) {
      if (evt && evt.type === "mousedown" && !this.results_showing) {
        evt.preventDefault();
      }
      if (!((evt != null) && ($(evt.target)).hasClass("search-choice-close"))) {
        if (!this.active_field) {
          if (this.is_multiple) {
            this.search_field.val("");
          }
          $(this.container[0].ownerDocument).bind('click.chosen', this.click_test_action);
          this.results_show();
        } else if (!this.is_multiple && evt && (($(evt.target)[0] === this.selected_item[0]) || $(evt.target).parents("a.chosen-single").length)) {
          evt.preventDefault();
          this.results_toggle();
        }
        return this.activate_field();
      }
    }
  };

function prototype_container_mouseup_funct(evt) {
    if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
      return this.results_reset(evt);
    }
  };
function prototype_blur_test_funct(evt) {
    if (!this.active_field && this.container.hasClass("chosen-container-active")) {
      return this.close_field();
    }
  };

function prototype_search_results_mousewheel_funct(evt) {
      var delta;
      if (evt.originalEvent) {
        delta = evt.originalEvent.deltaY || -evt.originalEvent.wheelDelta || evt.originalEvent.detail;
      }
      if (delta != null) {
        evt.preventDefault();
        if (evt.type === 'DOMMouseScroll') {
          delta = delta * 40;
        }
        return this.search_results.scrollTop(delta + this.search_results.scrollTop());
      }
    };
function prototype_close_field_funct() {
    $(this.container[0].ownerDocument).unbind("click.chosen", this.click_test_action);
    this.active_field = false;
    this.results_hide();
    this.container.removeClass("chosen-container-active");
    this.clear_backstroke();
    this.show_search_field_default();
    return this.search_field_scale();
  };

function prototype_activate_field_funct() {
    this.container.addClass("chosen-container-active");
    this.active_field = true;
    this.search_field.val(this.search_field.val());
    return this.search_field.focus();
  };

function prototype_test_active_click_funct(evt) {
    var active_container;
    active_container = $(evt.target).closest('.chosen-container');
    if (active_container.length && this.container[0] === active_container[0]) {
      return this.active_field = true;
    } else {
      return this.close_field();
    }
  };

function prototype_results_build_funct() {
    this.parsing = true;
    this.selected_option_count = null;
    this.results_data = SelectParser.select_to_array(this.form_field);
    if (this.is_multiple) {
      this.search_choices.find("li.search-choice").remove();
    } else if (!this.is_multiple) {
      this.single_set_selected_text();
      if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
        this.search_field[0].readOnly = true;
        this.container.addClass("chosen-container-single-nosearch");
      } else {
        this.search_field[0].readOnly = false;
        this.container.removeClass("chosen-container-single-nosearch");
      }
    }
    this.update_results_content(this.results_option_build({
      first: true
    }));
    this.search_field_disabled();
    this.show_search_field_default();
    this.search_field_scale();
    return this.parsing = false;
  };

function result_do_highlight_funct(el) {
    var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
    if (el.length) {
      this.result_clear_highlight();
      this.result_highlight = el;
      this.result_highlight.addClass("highlighted");
      maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
      visible_top = this.search_results.scrollTop();
      visible_bottom = maxHeight + visible_top;
      high_top = this.result_highlight.position().top + this.search_results.scrollTop();
      high_bottom = high_top + this.result_highlight.outerHeight();
      if (high_bottom >= visible_bottom) {
        return this.search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);
      } else if (high_top < visible_top) {
        return this.search_results.scrollTop(high_top);
      }
    }
  };

function get_search_text_funct() {
    return $('<div/>').text($.trim(this.search_field.val())).html();
  };

function no_results_clear_funct() {
    return this.search_results.find(".no-results").remove();
  };

function result_clear_highlight_funct() {
    if (this.result_highlight) {
      this.result_highlight.removeClass("highlighted");
    }
    return this.result_highlight = null;
  };

function update_results_content_funct(content) {
    return this.search_results.html(content);
  };

function results_show_funct() {
    if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
      this.form_field_jq.trigger("chosen:maxselected", {
        chosen: this
      });
      return false;
    }
    this.container.addClass("chosen-with-drop");
    this.results_showing = true;
    this.search_field.focus();
    this.search_field.val(this.search_field.val());
    this.winnow_results();
    return this.form_field_jq.trigger("chosen:showing_dropdown", {
      chosen: this
    });
  };

function results_hide_funct() {
    if (this.results_showing) {
      this.result_clear_highlight();
      this.container.removeClass("chosen-with-drop");
      this.form_field_jq.trigger("chosen:hiding_dropdown", {
        chosen: this
      });
    }
    return this.results_showing = false;
  };

function set_tab_index(el) {
    var ti;
    if (this.form_field.tabIndex) {
      ti = this.form_field.tabIndex;
      this.form_field.tabIndex = -1;
      return this.search_field[0].tabIndex = ti;
    }
  };

function set_label_behavior_funct() {
    var _this = this;
    this.form_field_label = this.form_field_jq.parents("label");
    if (!this.form_field_label.length && this.form_field.id.length) {
      this.form_field_label = $("label[for='" + this.form_field.id + "']");
    }
    if (this.form_field_label.length > 0) {
      return this.form_field_label.bind('click.chosen', function(evt) {
        if (_this.is_multiple) {
          return _this.container_mousedown(evt);
        } else {
          return _this.activate_field();
        }
      });
    }
  };

function show_search_field_default() {
    if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
      this.search_field.val(this.default_text);
      return this.search_field.addClass("default");
    } else {
      this.search_field.val("");
      return this.search_field.removeClass("default");
    }
  };

function search_results_mouseup_funct(evt) {
    var target;
    target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
    if (target.length) {
      this.result_highlight = target;
      this.result_select(evt);
      return this.search_field.focus();
    }
  };
  
function search_results_mouseover_funct(evt) {
    var target;
    target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
    if (target) {
      return this.result_do_highlight(target);
    }
  };

function results_mouseout_funct(evt) {
    if ($(evt.target).hasClass("active-result" || $(evt.target).parents('.active-result').first())) {
      return this.result_clear_highlight();
    }
  };

function choice_build_funct(item) {
    var choice, close_link,
      _this = this;
    choice = $('<li />', {
      "class": "search-choice"
    }).html("<span>" + (this.choice_label(item)) + "</span>");
    if (item.disabled) {
      choice.addClass('search-choice-disabled');
    } else {
      close_link = $('<a />', {
        "class": 'search-choice-close',
        'data-option-array-index': item.array_index
      });
      close_link.bind('click.chosen', function(evt) {
        return _this.choice_destroy_link_click(evt);
      });
      choice.append(close_link);
    }
    return this.search_container.before(choice);
  };
  
function destroy_link_click_funct(evt) {
    evt.preventDefault();
    evt.stopPropagation();
    if (!this.is_disabled) {
      return this.choice_destroy($(evt.target));
    }
  };

function choice_destroy_funct(link) {
    if (this.result_deselect(link[0].getAttribute("data-option-array-index"))) {
      this.show_search_field_default();
      if (this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1) {
        this.results_hide();
      }
      link.parents('li').first().remove();
      return this.search_field_scale();
    }
  };
  
function result_reset_funct() {
    this.reset_single_select_options();
    this.form_field.options[0].selected = true;
    this.single_set_selected_text();
    this.show_search_field_default();
    this.results_reset_cleanup();
    this.form_field_jq.trigger("change");
    if (this.active_field) {
      return this.results_hide();
    }
  };

function reset_cleanup_funct() {
      this.current_selectedIndex = this.form_field.selectedIndex;
      return this.selected_item.find("abbr").remove();
    };
  
function result_select_funct(evt) {
    var high, item;
    if (this.result_highlight) {
      high = this.result_highlight;
      this.result_clear_highlight();
      if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
        this.form_field_jq.trigger("chosen:maxselected", {
          chosen: this
        });
        return false;
      }
      if (this.is_multiple) {
        high.removeClass("active-result");
      } else {
        this.reset_single_select_options();
      }
      high.addClass("result-selected");
      item = this.results_data[high[0].getAttribute("data-option-array-index")];
      item.selected = true;
      this.form_field.options[item.options_index].selected = true;
      this.selected_option_count = null;
      if (this.is_multiple) {
        this.choice_build(item);
      } else {
        this.single_set_selected_text(this.choice_label(item));
      }
      if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {
        this.results_hide();
      }
      this.show_search_field_default();
      if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {
        this.form_field_jq.trigger("change", {
          'selected': this.form_field.options[item.options_index].value
        });
      }
      this.current_selectedIndex = this.form_field.selectedIndex;
      evt.preventDefault();
      return this.search_field_scale();
    }
  };

function single_deselect_control_build_funct() {
    if (!this.allow_single_deselect) {
      return;
    }
    if (!this.selected_item.find("abbr").length) {
      this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
    }
    return this.selected_item.addClass("chosen-single-with-deselect");
  };

function winnow_results_set_highlight_funct() {
    var do_high, selected_results;
    selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
    do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
    if (do_high != null) {
      return this.result_do_highlight(do_high);
    }
  };
  
function no_results_funct(terms) {
    var no_results_html;
    no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
    no_results_html.find("span").first().html(terms);
    this.search_results.append(no_results_html);
    return this.form_field_jq.trigger("chosen:no_results", {
      chosen: this
    });
  };

function keydown_arrow_funct() {
    var next_sib;
    if (this.results_showing && this.result_highlight) {
      next_sib = this.result_highlight.nextAll("li.active-result").first();
      if (next_sib) {
        return this.result_do_highlight(next_sib);
      }
    } else {
      return this.results_show();
    }
  };

function single_set_selected_text_funct(text) {
    if (text == null) {
      text = this.default_text;
    }
    if (text === this.default_text) {
      this.selected_item.addClass("chosen-default");
    } else {
      this.single_deselect_control_build();
      this.selected_item.removeClass("chosen-default");
    }
    return this.selected_item.find("span").html(text);
  };

function result_deselect_funct(pos) {
    var result_data;
    result_data = this.results_data[pos];
    if (!this.form_field.options[result_data.options_index].disabled) {
      result_data.selected = false;
      this.form_field.options[result_data.options_index].selected = false;
      this.selected_option_count = null;
      this.result_clear_highlight();
      if (this.results_showing) {
        this.winnow_results();
      }
      this.form_field_jq.trigger("change", {
        deselected: this.form_field.options[result_data.options_index].value
      });
      this.search_field_scale();
      return true;
    } else {
      return false;
    }
  };

function escapeExpression_funct(text) {
    var map, unsafe_chars;
    if ((text == null) || text === false) {
      return "";
    }
    if (!/[\&\<\>\"\'\`]/.test(text)) {
      return text;
    }
    map = {
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#x27;",
      "`": "&#x60;"
    };
    unsafe_chars = /&(?!\w+;)|[\<\>\"\'\`]/g;
    return text.replace(unsafe_chars, function(chr) {
      return map[chr] || "&amp;";
    });
  };

function add_option(option, group_position, group_disabled) {
    if (option.nodeName.toUpperCase() === "OPTION") {
      if (option.text !== "") {
        if (group_position != null) {
          this.parsed[group_position].children += 1;
        }
        this.parsed.push({
          array_index: this.parsed.length,
          options_index: this.options_index,
          value: option.value,
          text: option.text,
          html: option.innerHTML,
          title: option.title ? option.title : void 0,
          selected: option.selected,
          disabled: group_disabled === true ? group_disabled : option.disabled,
          group_array_index: group_position,
          group_label: group_position != null ? this.parsed[group_position].label : null,
          classes: option.className,
          style: option.style.cssText
        });
      } else {
        this.parsed.push({
          array_index: this.parsed.length,
          options_index: this.options_index,
          empty: true
        });
      }
      return this.options_index += 1;
    }
  };

function add_group_funct(group) {
    var group_position, option, _i, _len, _ref, _results;
    group_position = this.parsed.length;
    this.parsed.push({
      array_index: group_position,
      group: true,
      label: this.escapeExpression(group.label),
      title: group.title ? group.title : void 0,
      children: 0,
      disabled: group.disabled,
      classes: group.className
    });
    _ref = group.childNodes;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      option = _ref[_i];
      _results.push(this.add_option(option, group_position, group.disabled));
    }
    return _results;
  };

function keyup_arrow_funct() {
    var prev_sibs;
    if (!this.results_showing && !this.is_multiple) {
      return this.results_show();
    } else if (this.result_highlight) {
      prev_sibs = this.result_highlight.prevAll("li.active-result");
      if (prev_sibs.length) {
        return this.result_do_highlight(prev_sibs.first());
      } else {
        if (this.choices_count() > 0) {
          this.results_hide();
        }
        return this.result_clear_highlight();
      }
    }
  };

function clear_backstroke_funct() {
    if (this.pending_backstroke) {
      this.pending_backstroke.removeClass("search-choice-focus");
    }
    return this.pending_backstroke = null;
  };

function keyDownChecker(evt) {
    var stroke, _ref1;
    stroke = (_ref1 = evt.which) != null ? _ref1 : evt.keyCode;
    this.search_field_scale();
    if (stroke !== 8 && this.pending_backstroke) {
      this.clear_backstroke();
    }
    switch (stroke) {
      case 8:
        this.backstroke_length = this.search_field.val().length;
        break;
      case 9:
        if (this.results_showing && !this.is_multiple) {
          this.result_select(evt);
        }
        this.mouse_on_container = false;
        break;
      case 13:
        if (this.results_showing) {
          evt.preventDefault();
        }
        break;
      case 32:
        if (this.disable_search) {
          evt.preventDefault();
        }
        break;
      case 38:
        evt.preventDefault();
        this.keyup_arrow();
        break;
      case 40:
        evt.preventDefault();
        this.keydown_arrow();
        break;
       default:
    	   break;
    }
  };

function giveFieldScale() {
    var div, f_width, h, style, style_block, styles, w, _i, _len;
    if (this.is_multiple) {
      h = 0;
      w = 0;
      style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
      styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
      for (_i = 0, _len = styles.length; _i < _len; _i++) {
        style = styles[_i];
        style_block += style + ":" + this.search_field.css(style) + ";";
      }
      div = $('<div />', {
        'style': style_block
      });
      div.text(this.search_field.val());
      $('body').append(div);
      w = div.width() + 25;
      div.remove();
      f_width = this.container.outerWidth();
      if (w > f_width - 10) {
        w = f_width - 10;
      }
      return this.search_field.css({
        'width': w + 'px'
      });
    }
  };

function keyDownBackstroke() {
    var next_available_destroy;
    if (this.pending_backstroke) {
      this.choice_destroy(this.pending_backstroke.find("a").first());
      return this.clear_backstroke();
    } else {
      next_available_destroy = this.search_container.siblings("li.search-choice").last();
      if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
        this.pending_backstroke = next_available_destroy;
        if (this.single_backstroke_delete) {
          return this.keydown_backstroke();
        } else {
          return this.pending_backstroke.addClass("search-choice-focus");
        }
      }
    }
  };
